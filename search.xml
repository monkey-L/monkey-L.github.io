<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Unity中GameObject对象引用]]></title>
      <url>http://www.usuallight.com/2017/07/17/unity-gameobjectref/</url>
      <content type="html"><![CDATA[<p>今天想到个问题，GameObject对象销毁后，其对象引用==null为true，按正常来说，一个类引用变量，在没主动置其为null的情况下与null是不等值的。因此，不是引用变量的值变了，而应该是==操作符被Unity重载了。</p>
<a id="more"></a>
<p>上网查了下C#有没能直接对比对象引用的接口，找到了这个：</p>
<pre><code>object.ReferenceEquals(obj1, obj2);
</code></pre><p>它是个静态方法，不担心被重写。于是写了以下代码作测试验证：</p>
<pre><code>public class TestClass : MonoBehaviour
{
    private GameObject Obj = new GameObject(&quot;test&quot;);

    void Update()
    {
        if (Input.GetKeyDown(KeyCode.Space))
        {
            Debug.LogFormat(&quot;== ? {0}&quot;, Obj == null);
            Debug.LogFormat(&quot;object.ReferenceEquals ? {0}&quot;, object.ReferenceEquals(Obj, null));
            if (Obj != null)
            {
                GameObject.Destroy(Obj);
                Debug.Log(&quot;destroy obj!&quot;);
            }
        }
    }
}
</code></pre><p>输出结果：</p>
<p><img src="output1.png" alt=""></p>
<p>输出结果跟预期的一样。==操作符被Unity内部重载了才导致了判空能成立。出于好奇，也试了下Equal()函数，其结果与==操作符一样，也被Unity内部重载了。</p>
<p>因此，用GameObject对象引用时需多加注意，尽量避免用其引用作索引匹配之类的，因为C#的List或者Dictionary等数据结构是用默认的相等比较器Equal()进行对比的，除非自己特殊指定比较器。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[assetbundle-optimization]]></title>
      <url>http://www.usuallight.com/2017/01/20/assetbundle-optimization/</url>
      <content type="html"><![CDATA[<p>主要问题是散包很多，加载太慢。我导出了份数据，其中大部分模型单个模型都依赖了20多个包。针对散包的问题，由于散包主要为材质球和其依赖的贴图还有声音，因此考虑了以下优化点：</p>
<p>公用资源（shader、setting、script、mapdata）：</p>
<ul>
<li>一种资源一个包，按文件夹打包</li>
</ul>
<p>模型：</p>
<ul>
<li>模型预设不要直接绑定特效和声音</li>
<li>模型贴图一个包，模型动作一个包，模型shader在shader包，其它模型依赖作为一个包。</li>
</ul>
<p>贴图：</p>
<ol>
<li>贴图归类，按文件夹打包（通用贴图、模型贴图、特效贴图）</li>
</ol>
<p>特效：</p>
<ol>
<li>特效分类，</li>
</ol>
<p>图集：</p>
<ol>
<li>一个图集一个包</li>
</ol>
<p>UI：</p>
<ol>
<li>除了图集外，一个UI一个包.</li>
</ol>
<p>声音：</p>
<ol>
<li>声音分类，按文件夹打包</li>
</ol>
<p>材质：</p>
<ol>
<li></li>
</ol>
<h1 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h1><h1 id="方案："><a href="#方案：" class="headerlink" title="方案："></a>方案：</h1><p>Resources:</p>
<p>整包资源：</p>
<ul>
<li>setting</li>
<li>script</li>
<li>shader</li>
</ul>
<p>散包资源：</p>
<ul>
<li>audio</li>
<li>model</li>
<li>effect</li>
<li>ui</li>
<li>atlas</li>
<li>other</li>
<li>img</li>
<li>navdata</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[学着写技术博客]]></title>
      <url>http://www.usuallight.com/2017/01/18/howwrite/</url>
      <content type="html"><![CDATA[<p>最近想着手写写技术博客，在网上了解了下如何去写好一篇技术博客，我总结了下觉得有两点说得挺好：</p>
<ul>
<li>技术博客不是写过程，而是写总结。</li>
<li>技术博客是文章，应该过滤掉个人感情色彩，用陈述语气进行描述，因为读者想了解的是技术本身，而不是作者的个人感受。</li>
</ul>
<p>学习了大牛们的技术博客后，加上我个人的理解，我觉得写一篇技术博客应该具备以下的点：</p>
<ol>
<li>主题：明确博客主题，全文围绕主题展开，一文只论一题，若涉及其它主题则另开新篇博文进行描述。</li>
<li>开篇：由于个人喜好原因，我觉得文章开篇可适当讲述下主题背景原因，从背景原因开启一篇文章。（个人觉得这样会给读者像是在听故事的感觉，不会那么突兀）</li>
<li>内容：针对遇到的问题进行阐述，并提出自己的思路或解决方案。内容尽量以图形进行表达，少用文字和代码。</li>
<li>待完善的点（可选）：不足之处，还能完善或者解决的地方。</li>
<li>源码（可选）：若能提供源码，可放上自己的github链接。</li>
<li>参考链接：支持原创，引用到他人文章内容时注明出处。</li>
</ol>
<p>目前暂时只想到这些，日后若有新的想法，会持续更新和完善此文。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[assetbundle打包策略]]></title>
      <url>http://www.usuallight.com/2017/01/04/assetbundle-pack/</url>
      <content type="html"><![CDATA[<p>做打包已经有一阵子了，之前只是记了些备忘，最近才开始想写博客，现在来把它补上。刚开始接触assetbundle时，新来的老大带了一份他以前，不是很清楚要怎么处理资源依赖比较好，出现了相互依赖的情况，</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[moba类游戏的视野同步]]></title>
      <url>http://www.usuallight.com/2016/12/28/mobaaoi/</url>
      <content type="html"><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol>
<li><p>对象类型分组：</p>
<ul>
<li>观察者（watcher）</li>
<li><p>被观察者（marker）</p>
<p>对象可以既是观察者，又是被观察者。</p>
</li>
</ul>
</li>
<li><p>对象触发检查的时机：</p>
<ul>
<li>对象新增</li>
<li>对象移除</li>
<li>对象位置更新</li>
</ul>
</li>
<li><p>对象检查时的比较集：</p>
<ul>
<li>对象是观察者，比较所有</li>
<li>对象不是观察者，只与观察者比较</li>
</ul>
</li>
<li><p>优化点：</p>
<ul>
<li>阵营区分，同阵营观察者间不作比较</li>
<li>限制位置更新触发检查的时机，线段移动一定距离再触发</li>
</ul>
</li>
<li></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Unity打包和热更新&&assetbundle]]></title>
      <url>http://www.usuallight.com/2016/10/20/assetbundle/</url>
      <content type="html"><![CDATA[<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h2 id="流程问题"><a href="#流程问题" class="headerlink" title="流程问题"></a>流程问题</h2><ul>
<li>怎么管理资源？</li>
<li>怎么划分assetbundle包？</li>
<li>怎么处理依赖？</li>
<li>怎么做差异/增量更新？</li>
<li>怎么加载和管理assetbundle？</li>
<li>环境配置</li>
</ul>
<h2 id="细节问题"><a href="#细节问题" class="headerlink" title="细节问题"></a>细节问题</h2><ul>
<li><p>依赖需要按顺序加载不？<br>不需要，保证所有依赖包能加载进来就行</p>
</li>
<li><p>怎么处理资源路径和ab的映射问题？</p>
</li>
<li>resources的加载是不加扩展名，而ab的加载是加扩展名，因此一开始就应该定义好路径规则，统一都传带扩展名的路径，判断是用resources加载时再动态去掉扩展名</li>
<li>预设的引用太乱了，不干净，例如模型上预设又挂着特效资源，特效预设又挂着声音资源，这样会很影响到打包依赖，所以此时每种资源应该有个管理，例如特效管理和声音管理，相互之间的关联再通过配置表实现</li>
<li>同个bundle中的资源同名问题？<br>按文件夹打包，根据全路径读取是最好的，ab读取资源的路径参数有两种方式：<ol>
<li>资源名（不带路径，不带扩展名，包内资源名必须唯一）</li>
<li>全路径（带路径，带扩展名）</li>
</ol>
</li>
<li>依赖包需不需要按顺序加载？</li>
<li>asset后缀文件打不进ab包？</li>
<li>用#号拼出assetbundle名后，www加载会有失败</li>
<li>xcode是7.3，而真机是10.0，导致程序Build不进手机，而电脑又是黑苹果，升级系统会各种问题，后面查了下原来可以直接复制更高版本的xcode程序包下的高版本文件到低版本程序包里，ios的目录是：Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport/，下面有各个版本的支持情况</li>
<li>路径名不能有空格，不然ios读不到</li>
<li>依赖不加载全，就所有资源都不能加载还是指定资源的依赖都加载了就能加载此资源？</li>
<li>同个资源能同时打到不同包上吗</li>
<li>更新异常处理：<ol>
<li>网络挂了</li>
<li>磁盘满</li>
<li>gprs网络提示</li>
</ol>
</li>
<li>协程处理热更新时，需要处理异常的处理，因为协程内发生异常是不影响协程外执行的</li>
</ul>
<h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><ul>
<li>我的mac机是64位，要选osx64平台才能打包成功</li>
<li>打包时我是对resources下的文件夹移至</li>
<li>www加载文本文件后，用www.text访问文本内容会有编码限制。官方文档上有要求文件内容为utf8或者ascii编码，如果是其它编码格式，需要通过www.bytes转编码为string(如：System.Text.Encoding.UTF7.GetString(www.bytes))，另一个问题是，官方文档中提的utf8是不带bom的，我是用c#自带的System.Text.Encoding.UTF8写出来的文件，查了格式才知道，原来这样写出来的文件是默认带bom的，如果希望文件是无bom的utf8编码，应该自己创建(new UTF8Encoding(false))进行写入。</li>
<li>android streamingdatapath是在apk包里面，无法直接使用本地读取，只能通过www访问</li>
<li>平台路径问题</li>
<li>异步加载读资源失败，同步加载没问题？</li>
</ul>
<h1 id="资源目录"><a href="#资源目录" class="headerlink" title="资源目录"></a>资源目录</h1><ul>
<li>setting</li>
<li>script</li>
<li>shaders</li>
<li>audio</li>
<li>font</li>
<li>model</li>
<li>ui</li>
<li>effect</li>
<li>texture</li>
</ul>
<h1 id="资源打包"><a href="#资源打包" class="headerlink" title="资源打包"></a>资源打包</h1><h2 id="打包策略"><a href="#打包策略" class="headerlink" title="打包策略"></a>打包策略</h2><h3 id="整包"><a href="#整包" class="headerlink" title="整包"></a>整包</h3><ul>
<li>setting</li>
<li>script</li>
<li>shader</li>
<li>audio</li>
<li>font</li>
<li>ui</li>
</ul>
<h3 id="散包"><a href="#散包" class="headerlink" title="散包"></a>散包</h3><p>主包名与其资源目录相同，便于查找</p>
<ol>
<li>主包</li>
</ol>
<ul>
<li>每个model预设</li>
<li>每个特效预设</li>
<li>每个UI贴图</li>
</ul>
<ol>
<li>依赖包</li>
</ol>
<h3 id="资源包目录结构"><a href="#资源包目录结构" class="headerlink" title="资源包目录结构"></a>资源包目录结构</h3><h1 id="资源更新"><a href="#资源更新" class="headerlink" title="资源更新"></a>资源更新</h1><h1 id="资源加载"><a href="#资源加载" class="headerlink" title="资源加载"></a>资源加载</h1><h1 id="assetbundle流程"><a href="#assetbundle流程" class="headerlink" title="assetbundle流程"></a>assetbundle流程</h1><ul>
<li>assetbundle打包</li>
<li>assetbundle上传</li>
<li>assetbunlde下载</li>
<li>assetbundle加载</li>
<li>asset加载 </li>
<li>assetbundle卸载</li>
<li>www释放</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo+Next+Github 搭建个人博客]]></title>
      <url>http://www.usuallight.com/2016/08/12/blog-hexo/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>用Hexo搭建网站主要就是两个配置文件，一个站点配置文件(/_config.yml)，另一个是主题配置文件(/themes/[themefolder]/_config.yml)，配置好这两个配置文件基本就可以了，剩下的都只是一些安装和部署。</p>
<a id="more"></a>
<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>官方链接：<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">https://hexo.io/zh-cn/</a></p>
<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><ul>
<li>Hexo依赖于Node.js，需提前安装<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a></li>
<li><p>安装Hexo，应用Node.js指令：  </p>
<pre><code>npm install hexo-cli -g
</code></pre></li>
<li><p>新建Hexo工程</p>
<pre><code>hexo init &lt;folder&gt;    
</code></pre></li>
<li><p>初始化Hexo</p>
<pre><code>npm install
</code></pre></li>
</ul>
<h2 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h2><ul>
<li><p>添加rss</p>
<pre><code>npm install hexo-generator-feed --save
</code></pre></li>
<li><p>站内搜索</p>
<pre><code>npm install hexo-generator-search --save
</code></pre><p>  配置站点文件：</p>
<pre><code>search:
path: search.xml
field: post
</code></pre></li>
<li><p>Github托管</p>
<pre><code>npm install hexo-deployer-git --save    
</code></pre><p>  配置站点文件：</p>
<pre><code>deploy:
type: git
repository: https://github.com/monkeylight/monkeylight.github.io.git
branch: master
</code></pre></li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li><p>生成静态文件(public文件夹) </p>
<pre><code>hexo generate/-g
</code></pre></li>
<li><p>清除缓存文件(db.json)和已生成的静态文件(public文件夹)</p>
<pre><code>hexo clean
</code></pre></li>
<li><p>启动本地服务器</p>
<pre><code>hexo server
</code></pre></li>
<li><p>部署网站到托管平台</p>
<pre><code>hexo deploy/-d
</code></pre></li>
<li><p>新建文章</p>
<pre><code>hexo new [layout] &lt;title&gt;
</code></pre><p>  layout有三种：post（博客）/ page（页面）/ draft（草稿）</p>
<p>  例如，新建一个“关于”页：</p>
<pre><code>hexo new page about
</code></pre></li>
</ul>
<h1 id="NexT主题"><a href="#NexT主题" class="headerlink" title="NexT主题"></a>NexT主题</h1><p>官方链接：<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">http://theme-next.iissnan.com/</a></p>
<p>主题主要是一些配置信息的设置，官方文档里说得很详细，根据自己喜好和需要配置即可。但我在使用过程中遇到了一些问题，官方文档里没提及，在这分享一下：</p>
<ul>
<li><p>官方推荐的Swiftype搜索用不了，据说是Switftype开始收费的原因，所以不支持了（-.- 只是听说）。<br>  解决方法：<br>  见上方Hexo页–&gt;扩展功能–&gt;站内搜索</p>
</li>
<li><p>about页面使用无序列表没有小圆圈标识。<br>  解决方法：<br>  添加自定义样式，在配置文件/themes/next/source/css/_custom/custom.styl中添加代码：</p>
<pre><code>ul { list-style-type: circle; }
</code></pre></li>
</ul>
<h1 id="环境共享"><a href="#环境共享" class="headerlink" title="环境共享"></a>环境共享</h1><p>单纯地用hexo部署网站，会有几个问题：</p>
<ol>
<li>每次部署都会覆盖上一次的内容，上次的提交记录会被清除！这不方便我查看历史记录</li>
<li>共享配置环境的问题，我总不能每次换个地方都要重新配置一次hexo环境吧，那多恶心。</li>
</ol>
<p>针对以上问题，我首先想到的是在Github上用多一个仓库来存储hexo的配置环境，一个用来手动提交网站配置和博客内容，一个用来一健部署托管后台。后来在网上看到更机智的，就是用一个仓库多分支就行了，没必要多仓库。</p>
<h1 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h1><p>域名方面有两个选择：  </p>
<ol>
<li>直接使用github的二级域名（username.github.io），免费！  </li>
<li>自己买个域名。买吧，感觉多爽，哈哈。</li>
</ol>
<h2 id="个人域名"><a href="#个人域名" class="headerlink" title="个人域名"></a>个人域名</h2><ol>
<li>域名购买（我是在godaddy买的，这个看你喜好吧）</li>
<li>绑定github:<br> 在hexo/source文件夹下新建文件：CNAME（无后缀名），添加内容：yourwebsite.com</li>
<li>配置DNS，可以在godaddy的dns管理中配置，也可以用 <a href="https://www.dnspod.cn/" target="_blank" rel="external">DNSPod</a> 来管理更快和稳定。配置项：<ul>
<li>添加两条A记录分别指向Github服务器：<br>  <img src="dns1.png" alt="pic"></li>
<li>添加一条CNAME记录指向你用hexo部署的Githubt仓库（例如我的：monkeylight.github.io）：<br>  <img src="dns2.png" alt="pic"></li>
</ul>
</li>
</ol>
<hr>
<p>附：<a href="https://github.com/monkeylight/monkeylight.github.io" target="_blank" rel="external">monkeylight.github.io</a> 这个的是我的hexo环境配置，有兴趣的可以参考看看</p>
]]></content>
    </entry>
    
  
  
</search>
